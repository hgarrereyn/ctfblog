<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2017s on hgarrereyn</title>
    <link>https://ctf.harrisongreen.me/2017/</link>
    <description>Recent content in 2017s on hgarrereyn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ctf.harrisongreen.me/2017/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSAW - SCV (100pt)</title>
      <link>https://ctf.harrisongreen.me/2017/csaw/scv/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ctf.harrisongreen.me/2017/csaw/scv/</guid>
      <description>SCV (100pt) Exploitation
Files:
 scv scv_libc Exploit script: solveSCV.py  Summary At first glance, this looks like a simple buffer overflow ROP attack. However, in order to reach the return address, you must overwrite a stack canary that will trigger an exception.
In order to perform the attack, you have to leak the stack cookie so that you can replace it during the full overwrite.
Exploit The buffer overflow occurs here:</description>
    </item>
    
    <item>
      <title>SHA2017 - Megan-35 (200pt)</title>
      <link>https://ctf.harrisongreen.me/2017/sha2017/megan-35/</link>
      <pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ctf.harrisongreen.me/2017/sha2017/megan-35/</guid>
      <description>Megan-35 (200pt) Pwnable
Description: We created our own Megan-35 decoding tool, feel free to test it. System is running Ubuntu 16.04, ASLR is disabled.
Files:
 megan-35 libc.so.6 Exploit script: solveMegan35.py  Solution This was a pretty standard format string attack. The approach I used was to perform four writes at once to do the following: - replace printf@GOT with &amp;lt;system&amp;gt; - replace the saved return pointer with &amp;lt;main&amp;gt;</description>
    </item>
    
    <item>
      <title>SHA2017 - Stolen Bitcoins (300pt)</title>
      <link>https://ctf.harrisongreen.me/2017/sha2017/stolen-bitcoins/</link>
      <pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ctf.harrisongreen.me/2017/sha2017/stolen-bitcoins/</guid>
      <description>Stolen Bitcoins (300pt) Reverse
Description: Someone stole our Bitcoins, luckily we captured the transaction. Can you find the flag that will allow us to get them back?
Files:
 stolenbitcoins.tgz Decoded script for convenience: script.txt  Solution Opening the archive reveals a transmission file with some encoded data:
01000000000100e40b5402000000f...  Since the description says this is a Bitcoin transaction, I tried decoding it with Chain Query which revealed the following information:</description>
    </item>
    
    <item>
      <title>MeePwn 2017 - bs (100pt)</title>
      <link>https://ctf.harrisongreen.me/2017/meepwn/bs/</link>
      <pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ctf.harrisongreen.me/2017/meepwn/bs/</guid>
      <description>bs (100pt) Exploitation
Files:
 bs Exploit script: solveBS.py  Summary This challenge was really fun because I got to use ROP gadgets and GOT overwrites in the same exploit. The program itself allowed the user to enter a sequence of numbers which were sorted with a quick sort algorithm. Then the user could specify a target number and the program used a binary search to find the target. If it was found, the user could edit the values at that location and each location after it.</description>
    </item>
    
  </channel>
</rss>